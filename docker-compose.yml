services:
  # Main Application (Backend + Frontend)
  app:
    build: .
    ports:
      - "9000:9000"
      - "5173:5173"
      - "3001-3100:3001-3100"
      - "4001-4100:4001-4100"
      - "5001-5100:5001-5100"
      - "8001-8100:8001-8100"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - NODE_ENV=${NODE_ENV}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - JWT_SECRET=${JWT_SECRET}
      - MINIO_ENDPOINT=${MINIO_ENDPOINT}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
    depends_on:
      - postgres
      - redis
      - minio
    networks:
      - playground_network
  
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: postgres_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - playground_network

  # Redis Cache
  redis:
    image: redis:alpine
    container_name: redis_cache
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - playground_network

  # MinIO Cloud Storage Service
  minio:
    image: minio/minio:latest
    container_name: minio_storage
    command: server /data --console-address ":9002"
    ports:
      - "9001:9000"
      - "9002:9002"
    volumes:
      - minio_data:/data
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - playground_network

  # Auto-create MinIO bucket
  createbucket:
    image: minio/mc:latest
    container_name: minio_setup
    depends_on:
      - minio
    restart: on-failure
    networks:
      - playground_network
    entrypoint: >
      /bin/sh -c "
      echo 'Waiting for MinIO to be ready...';
      sleep 15;
      /usr/bin/mc alias set myminio http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD};
      /usr/bin/mc mb myminio/user-files --ignore-existing;
      /usr/bin/mc policy set public myminio/user-files;
      echo 'MinIO bucket user-files created successfully';
      exit 0;
      "

  # Frontend Development Server
  frontend-dev:
    build:
      context: ./interface
      dockerfile: Dockerfile.dev
    ports:
      - "5174:5173"
    volumes:
      - ./interface:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - PUBLIC_API_URL=${PUBLIC_API_URL}
      - PUBLIC_SOCKET_URL=${PUBLIC_SOCKET_URL}
    networks:
      - playground_network
    profiles:
      - dev

networks:
  playground_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  minio_data:
